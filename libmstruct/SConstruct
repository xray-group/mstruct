MY_SCONS_HELP = """\
SCons build rules for the libmstruct C++ library
Usage: scons [target] [var=value]

Targets:

mstruct             build the mstruct binary [default]
libmstruct          build the shared library object
install             install everything under prefix directory
install-lib         install the shared library object
install-scripts     install program scripts
install-modules     install python modules
install-include     install the C++ header files
sdist               create source distribution tarball from git repository

Build configuration variables:
%s
Variables can be also assigned in a user-written script sconsvars.py.
SCons construction environment can be customized in sconscript.local script.
"""

import os
import sys
import platform
from distutils.sysconfig import get_python_inc

def subdictionary(d, keyset):
    return dict(kv for kv in d.items() if kv[0] in keyset)

# copy system environment variables related to compilation
DefaultEnvironment(ENV=subdictionary(os.environ, '''
    PATH CPATH CPPPATH CPLUS_INCLUDE_PATH LIBRARY_PATH LD_RUN_PATH
    LD_LIBRARY_PATH DYLD_LIBRARY_PATH DYLD_FALLBACK_LIBRARY_PATH
    MACOSX_DEPLOYMENT_TARGET
    '''.split())
)

# Create construction environment
env = DefaultEnvironment().Clone()

# Variables definitions below work only with 0.98.1 or later.
env.EnsureSConsVersion(0, 98, 1)

env['version_str'] = "0.15.5"

#Adds option for selecting desired python version
AddOption('--python-version', dest='python_version', type='string', help="Python version to build libmstruct against."\
    " Expected format is: X.Y, example: scons --python-version=2.7. Automatically set to default system python version.")

def get_default_python_version():
    return sys.version_info[:2]
def get_python_version():
    version_option = GetOption('python_version')
    if version_option != None:
        try:
            version_option = version_option.split('.')
            assert len(version_option)==2
            assert len(version_option[0]) == 1
            assert len(version_option[1]) == 1
            python_version = (int(version_option[0]), int(version_option[1]))
        except:
            raise Exception("Invalid python version.")
    else:
        python_version = get_default_python_version()
    return python_version

python_version = get_python_version()

env.Append(python_version = python_version)
env.Append(python_version_str = '%d.%d' % env['python_version'])

# Customizable compile variables
vars = Variables('sconsvars.py')

vars.Add(PathVariable(
    'prefix',
    'installation prefix directory',
    '/usr/local'))
vars.Update(env)
vars.Add(PathVariable(
    'libdir',
    'installation directory for compiled library [prefix/lib]',
    env['prefix'] + '/lib',
    PathVariable.PathAccept))
vars.Add(PathVariable(
    'modulepath',
    'installation directory for python modules (site-pacakges)',
    env['prefix'] + '/lib/python%d.%d/site-packages' % python_version,
    PathVariable.PathAccept))
vars.Add(PathVariable(
    'includedir',
    'installation directory for C++ header files [prefix/include]',
    env['prefix'] + '/include',
    PathVariable.PathAccept))
vars.Add(EnumVariable(
    'build',
    'compiler settings',
    'fast', allowed_values=('debug', 'fast')))
vars.Add(EnumVariable(
    'tool',
    'C++ compiler toolkit to be used',
    'default', allowed_values=('default', 'intelc')))
vars.Add(BoolVariable(
    'profile',
    'build with profiling information', False))
vars.Add(BoolVariable(
    'with_shared_cctbx',
    'compile and link with the shared cctbx library', False))
vars.Update(env)
env.Help(MY_SCONS_HELP % vars.GenerateHelpText(env))

# Unpack cctbx sources if needed
if not os.path.isdir("./../cctbx"):
    os.system("bunzip2 -c -k ./../cctbx.tar.bz2 | tar -C ./.. -xv")
# Unpack newmat sources if needed
if not os.path.isdir("./../newmat"):
    os.system("bunzip2 -c -k ./../newmat.tar.bz2 | tar -C ./.. -xv")
# Unpack win-prebuild if needed
if env['PLATFORM'] == 'win32' and not os.path.isdir("./../win-prebuild"):
    os.system("bunzip2 -c -k ./../win-prebuild.tar.bz2 | tar -C ./.. -xv")

env.Append( CPPPATH=['.','ObjCryst','MStruct','cctbx/include', get_python_inc()] )

env.Append( CXXFLAGS=['-D__ZDENEK__'] )
env.Append( CXXFLAGS=['-D__PYMSTRUCT_TEST__'] )

builddir = env.Dir('build/%s-%s' % (env['build'], platform.machine()))

Export('env')

if os.path.isfile('sconscript.local'):
    env.SConscript('sconscript.local')

SConscript("./../SConscript", variant_dir=builddir)

# vim: ft=python
